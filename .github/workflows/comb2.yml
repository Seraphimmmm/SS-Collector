name: Combine2 Configs
on:
  schedule:
    - cron: "5 */1 * * *" # Run every 45 minutes
  workflow_dispatch:

env:
  # Vmess_V2rayCollector
  VMESS_V2RAY_FILE_URL: "https://raw.githubusercontent.com/lagzian/TVC/main/subscriptions/xray/normal/vmess"
  VMESS_V2RAY_OUTPUT_FILE: "vmess_ye.txt"
  VMESS_V2RAY_BASE64_FILE: "vmess_B64_ye.txt"
  VMESS_V2RAY_CLASH_YAML_FILE: "vmess_ye_clash.yaml"
  VMESS_V2RAY_SINGBOX_URL: "https://raw.githubusercontent.com/lagzian/TVC/main/subscriptions/singbox/vmess.json"
  VMESS_V2RAY_SINGBOX_JSON_FILE: "vmess_ye_singbox.json"

  # Vmess_Vless
  VMESS_VLESS_FILE_URL: "https://raw.githubusercontent.com/xc0000e9/deatnote/main/Hiddify-next.fragment"
  VMESS_VLESS_OUTPUT_FILE: "vmess_vless.txt"
  VMESS_VLESS_BASE64_FILE: "vmess_vless_B64.txt"
  VMESS_VLESS_CLASH_YAML_FILE: "vmess_vless_clash.yaml"
  VMESS_VLESS_SINGBOX_URL: "https://yebekhe.serv00.net/api/singbox/?url=https%3A%2F%2Fraw.githubusercontent.com%2Fxc0000e9%2Fdeatnote%2Fmain%2FHiddify-next.fragment&limit=0&tun=true"
  VMESS_VLESS_SINGBOX_JSON_FILE: "vmess_vless_singbox.json"

  # Shadowsocks
  SHADOWSOCKS_FILE_URL: "https://raw.githubusercontent.com/lagzian/V2RayAggregator/master/Eternity.txt"
  SHADOWSOCKS_OUTPUT_FILE: "shadowsockes.txt"
  SHADOWSOCKS_BASE64_FILE: "SS_B64.txt"
  SHADOWSOCKS_CLASH_YAML_FILE: "ss_clash.yaml"
  SHADOWSOCKS_SINGBOX_URL: "https://yebekhe.serv00.net/api/singbox/?url=https%3A%2F%2Fraw.githubusercontent.com%2Flagzian%2FSS-Collector%2Fmain%2Fshadowsockes.txt&limit=0&tun=true"
  SHADOWSOCKS_SINGBOX_JSON_FILE: "ss_singbox.json"

jobs:
  extract_configs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Git Config
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"

      # Vmess_V2rayCollector
      - name: Download Vmess_V2rayCollector TXT File
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }

          retry curl -o temp11.txt -L "${VMESS_V2RAY_FILE_URL}"

      - name: Debug Vmess_V2rayCollector File
        run: |
          echo "Contents of temp11.txt:"
          cat temp11.txt
          echo "End of file contents."

      - name: Extract Vmess_V2rayCollector Lines Starting with "vmess://"
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry grep '^vmess://' temp11.txt > "${GITHUB_WORKSPACE}/${VMESS_V2RAY_OUTPUT_FILE}"

      - name: Convert Vmess_V2rayCollector Lines to Base64 and Save
        run: |
          cat "${GITHUB_WORKSPACE}/${VMESS_V2RAY_OUTPUT_FILE}" | base64 -w 0 > "${GITHUB_WORKSPACE}/${VMESS_V2RAY_BASE64_FILE}"

      - name: Fetch Vmess_V2rayCollector Content and Generate YAML
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry curl -o "${GITHUB_WORKSPACE}/${VMESS_V2RAY_CLASH_YAML_FILE}" -L "https://yebekhe.serv00.net/api/clash/?url=https%3A%2F%2Fraw.githubusercontent.com%2Flagzian%2FTelegramV2rayCollector%2Fmain%2Fsub%2Fbase64%2Fvmess&type=clash&process=full"
          retry curl -o "${GITHUB_WORKSPACE}/${VMESS_V2RAY_SINGBOX_JSON_FILE}" -L "${VMESS_V2RAY_SINGBOX_URL}"

      # Vmess_Vless
      - name: Download Vmess_Vless TXT File
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry curl -o temp25.txt -L "${VMESS_VLESS_FILE_URL}"

      - name: Debug Vmess_Vless File
        run: |
          echo "Contents of temp25.txt:"
          cat temp25.txt
          echo "End of file contents."

      - name: Extract Vmess_Vless Lines Starting with "vmess://" and "vless://"
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry grep -E '^vless://|^vmess://' temp25.txt > "${GITHUB_WORKSPACE}/${VMESS_VLESS_OUTPUT_FILE}"

      - name: Convert Vmess_Vless Lines to Base64 and Save
        run: |
          cat "${GITHUB_WORKSPACE}/${VMESS_VLESS_OUTPUT_FILE}" | base64 -w 0 > "${GITHUB_WORKSPACE}/${VMESS_VLESS_BASE64_FILE}"

      - name: Fetch Vmess_Vless Content and Generate YAML
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry curl -o "${GITHUB_WORKSPACE}/${VMESS_VLESS_CLASH_YAML_FILE}" -L "https://yebekhe.serv00.net/api/clash/?url=https://raw.githubusercontent.com/xc0000e9/deatnote/main/Hiddify-next.fragment&type=meta&process=full"
          retry curl -o "${GITHUB_WORKSPACE}/${VMESS_VLESS_SINGBOX_JSON_FILE}" -L "${VMESS_VLESS_SINGBOX_URL}"

      # Shadowsocks
      - name: Download Shadowsocks TXT File
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry curl -o temp38.txt -L "${SHADOWSOCKS_FILE_URL}"

      - name: Debug Shadowsocks File
        run: |
          echo "Contents of temp38.txt:"
          cat temp38.txt
          echo "End of file contents."

      - name: Extract Shadowsocks Lines Starting with "ss://"
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry grep '^ss://' temp38.txt > "${GITHUB_WORKSPACE}/${SHADOWSOCKS_OUTPUT_FILE}"

      - name: Convert Shadowsocks Lines to Base64 and Save
        run: |
          cat "${GITHUB_WORKSPACE}/${SHADOWSOCKS_OUTPUT_FILE}" | base64 -w 0 > "${GITHUB_WORKSPACE}/${SHADOWSOCKS_BASE64_FILE}"

      - name: Fetch Shadowsocks Content and Generate YAML
        run: |
          retry() {
            local retries=15
            local count=0
            local cmd="$@"
            until $cmd; do
                exit_code=$?
                wait=$((2 ** $count))
                count=$((count + 1))
                if [ $count -lt $retries ]; then
                    echo "Retry $count/$retries exited with code $exit_code, retrying in $wait seconds..."
                    sleep $wait
                else
                    echo "Retry $count/$retries exited with code $exit_code, no more retries left."
                    return $exit_code
                fi
            done
            return 0
          }
          retry curl -o "${GITHUB_WORKSPACE}/${SHADOWSOCKS_CLASH_YAML_FILE}" -L "https://yebekhe.serv00.net/api/clash/?url=https://raw.githubusercontent.com/lagzian/V2RayAggregator/master/Eternity.txt&type=ss&process=full"
          retry curl -o "${GITHUB_WORKSPACE}/${SHADOWSOCKS_SINGBOX_JSON_FILE}" -L "${SHADOWSOCKS_SINGBOX_URL}"

      # Commit and push the changes
      
      - name: Commit and Push Changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
           git add .
           git commit -m "Updated config files"
           git push origin HEAD:${GITHUB_REF}
          else
           echo "No changes to commit."
          fi
        env:
         GH_TOKEN: ${{ secrets.GH_TOKEN1 }}
