name: VLESS Speed Test
on:
  schedule:
    - cron: "0 */2 * * *"  # Runs every 2 hours
  workflow_dispatch:

jobs:
  speed-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq
          
          echo "Installing v2ray..."
          curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh -o install-v2ray.sh
          chmod +x install-v2ray.sh
          sudo ./install-v2ray.sh
          
          echo "Verifying v2ray installation..."
          v2ray version
          
          echo "Setting permissions..."
          sudo chmod 755 /usr/local/bin/v2ray
          sudo chmod 755 /usr/local/share/v2ray -R
          
          echo "Installing Python packages..."
          pip install requests

      - name: Create Speed Test Script
        run: |
          cat > test_configs.py << 'EOF'
          import json
          import subprocess
          import time
          import requests
          from concurrent.futures import ThreadPoolExecutor, as_completed
          import sys
          import os
          import re
          from queue import Queue
          from threading import Lock

          print_lock = Lock()
          def log_message(msg):
              with print_lock:
                  print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")
                  sys.stdout.flush()

          def quick_ping(host):
              try:
                  # Use only 1 ping with 2 second timeout
                  result = subprocess.run(
                      ['ping', '-c', '1', '-W', '2', host],
                      capture_output=True,
                      text=True,
                      timeout=3
                  )
                  return result.returncode == 0
              except:
                  return False

          def detailed_ping(host):
              try:
                  # Use 2 pings for actual measurement
                  ping_output = subprocess.run(
                      ['ping', '-c', '2', '-W', '3', host],
                      capture_output=True,
                      text=True,
                      timeout=5
                  ).stdout
                  
                  if match := re.search(r'min/avg/max/mdev = \d+\.\d+/(\d+\.\d+)/\d+\.\d+/\d+\.\d+', ping_output):
                      return float(match.group(1))
                  return None
              except:
                  return None

          def batch_quick_ping(configs, max_workers=50):
              viable_configs = []
              servers_tested = set()
              
              def process_config(config):
                  try:
                      server = config.split("://")[1].split("@")[1].split(":")[0]
                      if server in servers_tested:
                          return config, True
                      servers_tested.add(server)
                      return config, quick_ping(server)
                  except:
                      return config, False

              log_message(f"Quick testing {len(configs)} configs...")
              with ThreadPoolExecutor(max_workers=max_workers) as executor:
                  futures = [executor.submit(process_config, config) for config in configs]
                  for future in as_completed(futures):
                      config, is_viable = future.result()
                      if is_viable:
                          viable_configs.append(config)

              log_message(f"Found {len(viable_configs)} viable configs")
              return viable_configs

          def test_config(config):
    try:
        server = config.split("://")[1].split("@")[1].split(":")[0]
        log_message(f"Testing server: {server}")
        
        # Get detailed ping
        ping_time = detailed_ping(server)
        if ping_time is None:
            log_message(f"Ping failed for {server}")
            return None
        
        # Create config file
        config_path = f"config_{server}.json"
        parts = config.split("://")[1].split("@")
        user_info = parts[0]
        server_info = parts[1].split("?")[0]
        server_port = int(server_info.split(":")[1])
        
        # Extract additional parameters if they exist
        params = {}
        if "?" in config:
            param_string = config.split("?")[1]
            for param in param_string.split("&"):
                if "=" in param:
                    key, value = param.split("=")
                    params[key] = value

        # Create v2ray config with all necessary parameters
        v2ray_config = {
            "inbounds": [{
                "port": 10809,
                "protocol": "http",
                "settings": {
                    "timeout": 5
                }
            }],
            "outbounds": [{
                "protocol": "vless",
                "settings": {
                    "vnext": [{
                        "address": server,
                        "port": server_port,
                        "users": [{
                            "id": user_info,
                            "encryption": "none",
                            "flow": params.get("flow", "")
                        }]
                    }]
                },
                "streamSettings": {
                    "network": params.get("type", "tcp"),
                    "security": params.get("security", "none"),
                    "tlsSettings": {
                        "serverName": params.get("sni", server),
                        "allowInsecure": True
                    } if params.get("security") == "tls" else None,
                    "wsSettings": {
                        "path": params.get("path", "/"),
                        "headers": {
                            "Host": params.get("host", server)
                        }
                    } if params.get("type") == "ws" else None
                }
            }]
        }
        
        log_message(f"Created config for {server}")
        with open(config_path, "w") as f:
            json.dump(v2ray_config, f, indent=2)
        
        # Test connection
        v2ray_process = subprocess.Popen(
            ["sudo", "v2ray", "run", "-config", config_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        time.sleep(2)  # Give more time to establish connection
        
        try:
            start_time = time.time()
            session = requests.Session()
            session.trust_env = False
            response = session.get(
                "http://www.google.com",  # Try HTTP first
                proxies={
                    "http": "http://127.0.0.1:10809",
                    "https": "http://127.0.0.1:10809"
                },
                timeout=10,
                verify=False
            )
            response_time = (time.time() - start_time) * 1000
            log_message(f"Success: {server} responded in {response_time:.1f}ms")
        except Exception as e:
            log_message(f"Connection failed for {server}: {str(e)}")
            response_time = None
        finally:
            stdout, stderr = v2ray_process.communicate(timeout=1)
            if stderr:
                log_message(f"V2Ray errors for {server}: {stderr.decode()}")
            subprocess.run(["sudo", "kill", str(v2ray_process.pid)], 
                        check=False, stdout=subprocess.DEVNULL, 
                        stderr=subprocess.DEVNULL)
            os.remove(config_path)
        
        if response_time is None:
            return None
            
        return {
            "config": config,
            "ping": ping_time,
            "response_time": response_time,
            "server": server
        }
    except Exception as e:
        log_message(f"Error testing {server}: {str(e)}")
        return None

          def main():
              log_message("Starting speed test...")
              
              # Load configs
              with open("./VLESS/vless_vip.txt", "r") as f:
                  configs = f.read().splitlines()
              
              # Quick filter viable configs
              viable_configs = batch_quick_ping(configs)
              
              # Test viable configs in detail
              results = []
              with ThreadPoolExecutor(max_workers=10) as executor:
                  future_to_config = {executor.submit(test_config, config): config 
                                    for config in viable_configs}
                  
                  completed = 0
                  for future in as_completed(future_to_config):
                      completed += 1
                      if completed % 10 == 0:
                          log_message(f"Processed {completed}/{len(viable_configs)} configs")
                      
                      result = future.result()
                      if result:
                          results.append(result)
              
              # Sort and save results
              results.sort(key=lambda x: x["ping"])
              
              with open("speed_test_results.md", "w") as f:
                  f.write("# VLESS Config Speed Test Results\n\n")
                  f.write(f"Updated: {time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n")
                  f.write(f"Total Configs Tested: {len(results)} out of {len(configs)}\n\n")
                  f.write("| Server | Ping (ms) | Response Time (ms) | Config |\n")
                  f.write("|--------|-----------|-------------------|--------|\n")
                  
                  for result in results:
                      f.write(f"| {result['server']} | {result['ping']:.1f} | "
                             f"{result['response_time']:.1f} | `{result['config']}` |\n")
              
              log_message(f"Speed test completed. Found {len(results)} working configs.")

          if __name__ == "__main__":
              main()
          EOF

      - name: Set up sudo access
        run: |
          echo "runner ALL=(ALL) NOPASSWD: /usr/local/bin/v2ray, /usr/bin/kill" | sudo tee /etc/sudoers.d/v2ray-runner

      - name: Run Speed Test
        timeout-minutes: 25
        run: |
          echo "Starting speed test script..."
          python -u test_configs.py
        
      - name: Check Results
        id: check_results
        run: |
          if [ -f speed_test_results.md ]; then
            echo "results=true" >> $GITHUB_OUTPUT
            echo "Number of configs tested:"
            grep "Total Configs Tested:" speed_test_results.md
          else
            echo "results=false" >> $GITHUB_OUTPUT
            echo "No results file found"
          fi

      - name: Commit and Push Results
        if: steps.check_results.outputs.results == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add speed_test_results.md
          git commit -m "Update speed test results"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
