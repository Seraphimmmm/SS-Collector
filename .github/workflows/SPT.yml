name: VLESS Speed Test
on:
  schedule:
    - cron: "0 */2 * * *"  # Runs every 2 hours
  workflow_dispatch:  # Allows manual triggering

jobs:
  speed-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq

          # Download v2ray install script and run with sudo
          curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh -o install-v2ray.sh
          chmod +x install-v2ray.sh
          sudo ./install-v2ray.sh
          
          # Verify v2ray installation
          v2ray version
          
          # Set correct permissions for v2ray
          sudo chmod 755 /usr/local/bin/v2ray
          sudo chmod 755 /usr/local/share/v2ray -R
          
          # Install Python packages
          pip install requests

      - name: Create Speed Test Script
        run: |
          cat > test_configs.py << 'EOF'
          import json
          import subprocess
          import time
          import requests
          from concurrent.futures import ThreadPoolExecutor
          import sys
          import os
          import re
          
          def get_ping(host):
              try:
                  ping_output = subprocess.run(
                      ['ping', '-c', '3', host],
                      capture_output=True,
                      text=True,
                      timeout=10
                  ).stdout
                  
                  if match := re.search(r'min/avg/max/mdev = \d+\.\d+/(\d+\.\d+)/\d+\.\d+/\d+\.\d+', ping_output):
                      return float(match.group(1))
                  return None
              except:
                  return None
          
          def create_v2ray_config(vless_url):
              try:
                  # Parse VLESS URL
                  parts = vless_url.split("://")[1].split("@")
                  user_info = parts[0]
                  server_info = parts[1].split("?")[0]
                  server_address = server_info.split(":")[0]
                  server_port = int(server_info.split(":")[1])
                  
                  # Create basic config
                  config = {
                      "inbounds": [{
                          "port": 1080,
                          "protocol": "socks",
                          "settings": {
                              "auth": "noauth",
                              "udp": True
                          }
                      }],
                      "outbounds": [{
                          "protocol": "vless",
                          "settings": {
                              "vnext": [{
                                  "address": server_address,
                                  "port": server_port,
                                  "users": [{
                                      "id": user_info,
                                      "encryption": "none"
                                  }]
                              }]
                          },
                          "streamSettings": {
                              "network": "tcp"
                          }
                      }]
                  }
                  
                  # Save config
                  config_path = os.path.join(os.getcwd(), "config.json")
                  with open(config_path, "w") as f:
                      json.dump(config, f)
                  
                  return config_path
              except Exception as e:
                  print(f"Error creating config: {str(e)}")
                  return None
          
          def test_config(config):
              try:
                  # Create v2ray config
                  config_path = create_v2ray_config(config)
                  if not config_path:
                      return None
                  
                  # Extract server info
                  server = config.split("://")[1].split("@")[1].split(":")[0]
                  
                  # Test ping first
                  ping_time = get_ping(server)
                  if ping_time is None:
                      return None
                  
                  # Start v2ray with sudo
                  v2ray_process = subprocess.Popen(
                      ["sudo", "v2ray", "run", "-config", config_path],
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL
                  )
                  
                  time.sleep(2)  # Wait for v2ray to start
                  
                  # Test connection speed using Google
                  start_time = time.time()
                  try:
                      response = requests.get(
                          "https://www.google.com",
                          proxies={
                              "http": "socks5://127.0.0.1:1080",
                              "https": "socks5://127.0.0.1:1080"
                          },
                          timeout=10
                      )
                      response_time = (time.time() - start_time) * 1000  # Convert to ms
                  except:
                      subprocess.run(["sudo", "kill", str(v2ray_process.pid)], check=False)
                      return None
                  
                  # Clean up
                  subprocess.run(["sudo", "kill", str(v2ray_process.pid)], check=False)
                  
                  return {
                      "config": config,
                      "ping": ping_time,
                      "response_time": response_time,
                      "server": server
                  }
              except Exception as e:
                  print(f"Error testing config: {str(e)}")
                  return None
          
          def main():
              # Read configs
              with open("./VLESS/vless_vip.txt", "r") as f:
                  configs = f.read().splitlines()
              
              results = []
              with ThreadPoolExecutor(max_workers=3) as executor:
                  futures = [executor.submit(test_config, config) for config in configs]
                  for future in futures:
                      result = future.result()
                      if result:
                          results.append(result)
              
              # Sort by ping time
              results.sort(key=lambda x: x["ping"])
              
              # Write results
              with open("speed_test_results.md", "w") as f:
                  f.write("# VLESS Config Speed Test Results\n\n")
                  f.write("Updated: " + time.strftime("%Y-%m-%d %H:%M:%S UTC\n\n"))
                  f.write("| Server | Ping (ms) | Response Time (ms) | Config |\n")
                  f.write("|--------|-----------|-------------------|--------|\n")
                  
                  for result in results:
                      f.write(f"| {result['server']} | {result['ping']:.1f} | {result['response_time']:.1f} | `{result['config']}` |\n")
          
          if __name__ == "__main__":
              main()
          EOF

      - name: Set up sudo access
        run: |
          echo "runner ALL=(ALL) NOPASSWD: /usr/local/bin/v2ray, /usr/bin/kill" | sudo tee /etc/sudoers.d/v2ray-runner

      - name: Run Speed Test
        run: |
          python test_configs.py
          
      - name: Check Results
        id: check_results
        run: |
          if [ -f speed_test_results.md ]; then
            echo "results=true" >> $GITHUB_OUTPUT
          else
            echo "results=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Results
        if: steps.check_results.outputs.results == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add speed_test_results.md
          git commit -m "Update speed test results"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
