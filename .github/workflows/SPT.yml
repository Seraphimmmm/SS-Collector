name: VLESS Speed Test
on:
  schedule:
    - cron: "0 */2 * * *"  # Runs every 2 hours
  workflow_dispatch:

jobs:
  speed-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq
          
          echo "Installing v2ray..."
          curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh -o install-v2ray.sh
          chmod +x install-v2ray.sh
          sudo ./install-v2ray.sh
          
          echo "Verifying v2ray installation..."
          v2ray version
          
          echo "Setting permissions..."
          sudo chmod 755 /usr/local/bin/v2ray
          sudo chmod 755 /usr/local/share/v2ray -R
          
          echo "Installing Python packages..."
          pip install requests urllib3

      - name: Create Speed Test Script
        run: |
          cat > test_configs.py << 'EOF'
          import json
          import subprocess
          import time
          import requests
          import urllib3
          from concurrent.futures import ThreadPoolExecutor, as_completed
          import sys
          import os
          import re
          from queue import Queue
          from threading import Lock

          # Disable SSL warnings
          urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

          print_lock = Lock()
          def log_message(msg):
              with print_lock:
                  print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {msg}")
                  sys.stdout.flush()

          def parse_vless_url(url):
              try:
                  # Split URL into parts
                  main_part = url.split("?")[0]
                  params_part = url.split("?")[1] if "?" in url else ""
                  
                  # Parse main parts
                  protocol, rest = main_part.split("://")
                  user_info, server_info = rest.split("@")
                  server_address, server_port = server_info.split(":")
                  
                  # Parse parameters
                  params = {}
                  if params_part:
                      for param in params_part.split("&"):
                          if "=" in param:
                              key, value = param.split("=")
                              params[key] = value
                  
                  return {
                      "protocol": protocol,
                      "user_id": user_info,
                      "address": server_address,
                      "port": int(server_port),
                      "params": params
                  }
              except Exception as e:
                  log_message(f"Error parsing URL: {str(e)}")
                  return None

          def test_connection_speed(session, proxy_url, test_urls):
              results = []
              for url in test_urls:
                  try:
                      start_time = time.time()
                      response = session.get(
                          url,
                          proxies={
                              "http": proxy_url,
                              "https": proxy_url
                          },
                          timeout=10,
                          verify=False
                      )
                      if response.status_code == 204:  # Success for generate_204 endpoints
                          delay = (time.time() - start_time) * 1000  # Convert to ms
                          results.append(delay)
                  except Exception as e:
                      continue
              
              return min(results) if results else None

          def test_config(config):
              try:
                  parsed = parse_vless_url(config)
                  if not parsed:
                      return None
                      
                  server = parsed["address"]
                  log_message(f"Testing server: {server}")
                  
                  # Create config file
                  config_path = f"config_{server}.json"
                  
                  # Create v2ray config
                  v2ray_config = {
                      "inbounds": [{
                          "port": 10809,
                          "protocol": "http",
                          "settings": {
                              "timeout": 5
                          }
                      }],
                      "outbounds": [{
                          "protocol": "vless",
                          "settings": {
                              "vnext": [{
                                  "address": server,
                                  "port": parsed["port"],
                                  "users": [{
                                      "id": parsed["user_id"],
                                      "encryption": "none",
                                      "flow": parsed["params"].get("flow", "")
                                  }]
                              }]
                          },
                          "streamSettings": {
                              "network": parsed["params"].get("type", "tcp"),
                              "security": parsed["params"].get("security", "none"),
                              "tlsSettings": {
                                  "serverName": parsed["params"].get("sni", server),
                                  "allowInsecure": True
                              } if parsed["params"].get("security") == "tls" else None,
                              "wsSettings": {
                                  "path": parsed["params"].get("path", "/"),
                                  "headers": {
                                      "Host": parsed["params"].get("host", server)
                                  }
                              } if parsed["params"].get("type") == "ws" else None
                          }
                      }]
                  }
                  
                  log_message(f"Testing connection for {server}")
                  with open(config_path, "w") as f:
                      json.dump(v2ray_config, f, indent=2)
                  
                  # Test connection
                  v2ray_process = subprocess.Popen(
                      ["sudo", "v2ray", "run", "-config", config_path],
                      stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL
                  )
                  
                  time.sleep(2)  # Wait for v2ray to start
                  
                  try:
                      session = requests.Session()
                      session.trust_env = False
                      
                      # Test URLs - multiple reliable endpoints
                      test_urls = [
                          "http://www.gstatic.com/generate_204",
                          "http://www.qualcomm.cn/generate_204",
                          "http://cp.cloudflare.com/generate_204",
                          "http://captive.apple.com/generate_204",
                          "http://connect.rom.miui.com/generate_204"
                      ]
                      
                      proxy_url = "http://127.0.0.1:10809"
                      
                      # Test initial connectivity
                      initial_delay = test_connection_speed(session, proxy_url, test_urls)
                      if initial_delay is None:
                          log_message(f"Initial connection failed for {server}")
                          return None
                      
                      # Do multiple tests to get average
                      delays = []
                      for _ in range(3):  # Test 3 times
                          delay = test_connection_speed(session, proxy_url, test_urls)
                          if delay is not None:
                              delays.append(delay)
                          time.sleep(0.5)  # Small delay between tests
                      
                      if not delays:
                          return None
                      
                      avg_delay = sum(delays) / len(delays)
                      log_message(f"Success: {server} average delay: {avg_delay:.1f}ms")
                      
                      return {
                          "config": config,
                          "delay": avg_delay,
                          "best_response": min(delays),
                          "server": server
                      }
                      
                  except Exception as e:
                      log_message(f"Connection failed for {server}: {str(e)}")
                      return None
                  finally:
                      subprocess.run(["sudo", "kill", str(v2ray_process.pid)], 
                                  check=False, stdout=subprocess.DEVNULL, 
                                  stderr=subprocess.DEVNULL)
                      os.remove(config_path)
                      
              except Exception as e:
                  log_message(f"Error testing {server if 'server' in locals() else 'unknown'}: {str(e)}")
                  return None

          def main():
              log_message("Starting speed test...")
              
              try:
                  with open("./VLESS/vless_vip.txt", "r") as f:
                      configs = f.read().splitlines()
                  log_message(f"Loaded {len(configs)} configs")
              except Exception as e:
                  log_message(f"Error loading configs: {str(e)}")
                  return
              
              # Test configs
              results = []
              with ThreadPoolExecutor(max_workers=10) as executor:
                  future_to_config = {executor.submit(test_config, config): config 
                                    for config in configs}
                  
                  completed = 0
                  for future in as_completed(future_to_config):
                      completed += 1
                      if completed % 10 == 0:
                          log_message(f"Processed {completed}/{len(configs)} configs")
                      
                      result = future.result()
                      if result:
                          results.append(result)
              
              # Sort and save results
              results.sort(key=lambda x: x["delay"])
              
              with open("speed_test_results.md", "w") as f:
                  f.write("# VLESS Config Speed Test Results\n\n")
                  f.write(f"Updated: {time.strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n")
                  f.write(f"Total Configs Tested: {len(results)} out of {len(configs)}\n\n")
                  f.write("| Server | Avg Delay (ms) | Best Response (ms) | Config |\n")
                  f.write("|--------|---------------|-------------------|--------|\n")
                  
                  for result in results:
                      f.write(f"| {result['server']} | {result['delay']:.1f} | "
                             f"{result['best_response']:.1f} | `{result['config']}` |\n")
              
              log_message(f"Speed test completed. Found {len(results)} working configs.")

          if __name__ == "__main__":
              main()
          EOF

      - name: Set up sudo access
        run: |
          echo "runner ALL=(ALL) NOPASSWD: /usr/local/bin/v2ray, /usr/bin/kill" | sudo tee /etc/sudoers.d/v2ray-runner

      - name: Run Speed Test
        timeout-minutes: 25
        run: |
          echo "Starting speed test script..."
          python -u test_configs.py
        
      - name: Check Results
        id: check_results
        run: |
          if [ -f speed_test_results.md ]; then
            echo "results=true" >> $GITHUB_OUTPUT
            echo "Number of configs tested:"
            grep "Total Configs Tested:" speed_test_results.md
          else
            echo "results=false" >> $GITHUB_OUTPUT
            echo "No results file found"
          fi

      - name: Commit and Push Results
        if: steps.check_results.outputs.results == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add speed_test_results.md
          git commit -m "Update speed test results"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
